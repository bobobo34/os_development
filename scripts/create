#!/usr/bin/bash

DIR=$(pwd)

if [ "$1" = "c" ]; then
	FILE_NAME=kernel.c
	GCC_EXT=cc
elif [ "$1" = "cpp" ]; then
	FILE_NAME=kernel.cpp
	GCC_EXT=++
else
	echo "$1 is not c or cpp!"
	exit 1
fi

if [ "$2" = "s" ]; then
	PERMS=sudo
else
	PERMS=""
fi


FILE="$DIR/$FILE_NAME"

if ! [ -f "$FILE" ]; then
	echo "$FILE doesn't exist."
	exit 1
fi

if [ "$1" = "c" ]; then
	GCC_OUTPUT=$($PERMS i686-elf-gcc -c $FILE -o kernel.o -std=gnu99 -ffreestanding -O2 -Wall -Wextra)
elif [ "$1" = "cpp" ]; then
	GCC_OUTPUT=$($PERMS i686-elf-g++ -c $FILE -o kernel.o -ffreestanding -O2 -Wall -Wextra -fno-exceptions -fno-rtti)
fi

if [ $? -eq 1 ]; then
	echo $GCC_OUTPUT
	echo "$FILE_NAME compile failed."
	exit 1
else
	echo "$FILE_NAME compiled..."
fi

BOOT_FILE="$DIR/boot.s"
LINKER_FILE="$DIR/linker.ld"
CRTI_FILE="$DIR/crti.s"
CRTN_FILE="$DIR/crtn.s"

if ! [ -f "$BOOT_FILE" ]; then
	echo "$BOOT_FILE not found."
	exit 1
fi
if ! [ -f "$LINKER_FILE" ]; then
	echo "$LINKER_FILE not found."
	exit 1
fi
if ! [ -f "$CRTI_FILE" ]; then
	echo "$CRTI_FILE not found."
	exit 1
fi
if ! [ -f "$CRTN_FILE" ]; then
	echo "$CRTN_FILE not found."
	exit 1
fi


BOOT_OUTPUT=$($PERMS i686-elf-as $BOOT_FILE -o boot.o)
if [ $? -eq 1 ]; then
	echo $BOOT_OUTPUT
	echo "boot.s compile failed."
	exit 1
else
	echo "boot.s compiled..."
fi

CRTI_OUTPUT=$($PERMS i686-elf-as $CRTI_FILE -o crti.o)
if [ $? -eq 1 ]; then
	echo $CRTI_OUTPUT
	echo "crti.s compile failed"
	exit 1
else
	echo "crti.s compiled..."
fi

CRTN_OUTPUT=$($PERMS i686-elf-as $CRTN_FILE -o crtn.o)
if [ $? -eq 1 ]; then
	echo $CRTO_OUTPUT
	echo "crtn.s compile failed"
	exit 1
else
	echo "crtn.s compiled..."
fi

CRTBEG_FILE="$($PERMS i686-elf-g$GCC_EXT $$CFLAGS -print-file-name=crtbegin.o)"
if [ $? -eq 1 ]; then
	echo $CRTBEG_FILE
	exit 1
fi
CRTEND_FILE="$($PERMS i686-elf-g$GCC_EXT $$CFLAGS -print-file-name=crtend.o)"
if [ $? -eq 1 ]; then
	echo $CRTEND_FILE
	exit 1
fi

LINK_OUTPUT=$($PERMS i686-elf-g$GCC_EXT -T $LINKER_FILE -o myos.bin -ffreestanding -O2 -nostdlib $DIR/boot.o $DIR/crti.o $CRTBEG_FILE $DIR/kernel.o $CRTEND_FILE $DIR/crtn.o -lgcc)
if [ $? -eq 1 ]; then
	echo $LINK_OUTPUT
	echo "linking failed."
	exit 1
else
	echo "linking successful!"
fi

echo "Verifying multiboot..."

if grub-file --is-x86-multiboot myos.bin; then
	echo Multiboot confirmed!
else
	echo myos.bin is not multiboot!
fi
